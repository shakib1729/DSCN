#include <iostream>
#include <vector>
#include <climits>
using namespace std;

int minCostPath(int **input, int i,int j, int m, int n) {
    if(i == m-1 and j == n-1)
        return input[i][j];
    int op1 = INT_MAX, op2 = INT_MAX, op3 = INT_MAX;
    if(i+1 < m)
     op1 = minCostPath(input, i+1, j, m, n) + input[i][j];
    if(j+1 < n)
     op2 = minCostPath(input, i, j+1, m, n) + input[i][j];
    if(i+1 < m and j+1 < n)
     op3 = minCostPath(input, i+1, j+1, m, n) + input[i][j];
    return min(min(op1, op2), op3);
}


int minCostPath(int **input, int m, int n) {
    return minCostPath(input, 0, 0, m, n);
}





int main() {
    int **arr,n,m;
    cin >> n >> m;
    arr = new int*[n];
    for(int i = 0; i < n; i++) {
        arr[i] = new int[m];
    }
    for(int i = 0; i < n; i++) {
        for(int j = 0; j < m; j++) {
            cin >> arr[i][j];
        }
    }
    cout << minCostPath(arr, n, m) << endl;
}
