#include <iostream>
#include <vector>
#include <map>
using namespace std;

// // if we used 'unordered_map', then we would have to provide our own hash function when 'pair' is used as a key
// map< pair<string, string> , int > m;

// int editDistance(string s1, string s2){
//   // check if the answer is already present
//   pair <string, string> p;
//   p.first = s1, p.second = s2;
//   if(m.count(p) > 0){
//       return m[p];
//   }
      
//   int ls1 = s1.length(), ls2 = s2.length();
//   if(ls1 == 0 and ls2 == 0)
//       return 0;
//   if(ls1 == 0)
//       return ls2;
//   if(ls2 == 0)
//       return ls1;
//   if(s1[0] == s2[0]){
//      m[p] = editDistance(s1.substr(1), s2.substr(1));
//      return m[p];
//   }
     
//   else{
//       int op1 = editDistance(s1, s2.substr(1)) + 1, // delete first character from s2
//           op2 = editDistance(s1.substr(1), s2) + 1, // insert a character at starting in s2
//           op3 = editDistance(s1.substr(1), s2.substr(1)) + 1; // replace first character in s2
//       m[p] = min(min(op1, op2), op3);
//       return m[p];
//   }
// }




int editDistance(string s1, string s2){
  int m = s1.length(), n = s2.length(); 
    
    int dp[m+1][n+1]={};
    for(int i=0; i<=m; i++)
        dp[i][0] = i;
    for(int j=0; j<=n; j++)
        dp[0][j] = j;
    
    for(int i=1; i<=m; i++)
        for(int j=1; j<=n; j++){
            if(s1[i-1] == s2[j-1])
                dp[i][j] = dp[i-1][j-1];
            else{
                int op1 = dp[i-1][j] + 1,
                    op2 = dp[i][j-1] + 1,
                    op3 = dp[i-1][j-1] + 1;
                dp[i][j] = min(min(op1, op2), op3);
            }
        }
    return dp[m][n];
}


int main(){

  string s1;
  string s2;

  cin >> s1;
  cin >> s2;

  cout << editDistance(s1,s2) << endl;

}


