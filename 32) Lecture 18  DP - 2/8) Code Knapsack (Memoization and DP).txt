#include<iostream>
using namespace std;




int knapsack(int* weights, int* values, int n, int maxWeight){

 int dp[2][maxWeight+1];
 
 int r = 0;
 for(int i=0; i<=n; i++){
     for(int j=0; j<=maxWeight; j++){
         if(i==0 or j==0)
             dp[r][j] = 0;
         else{
             if(j-weights[i-1] >= 0)
                dp[r][j] = max(dp[!r][j], dp[!r][j-weights[i-1]] + values[i-1]);
             else
                dp[r][j] = dp[!r][j];
         }
          
     }
     r = !r;
 }
 if(n%2 == 0)
  return dp[0][maxWeight];
return dp[1][maxWeight];
}








int main(){

  int n; 
  cin >> n;
  int* weights = new int[n];
  int* values = new int[n];

  for(int i = 0; i < n; i++){
    cin >> weights[i];
  }

  for(int i = 0; i < n; i++){
    cin >> values[i];
  }

  int maxWeight;
  cin >> maxWeight;

  cout << knapsack(weights, values, n, maxWeight);

}


