#include<iostream>
using namespace std;
#include <vector>





#include<unordered_map>
vector<int> longestSubsequence(int *arr, int n){
  unordered_map<int, bool> m;
  unordered_map<int, int> mIndex;

  for(int i=0; i<n; i++){
     m[arr[i]] = false;
    if(mIndex.count(arr[i]) == 0)
     mIndex[arr[i]] = i;
  }
   
  
  int maxLength = 0, smallestElementIndex = n-1;
  
  for(int i=0; i<n; i++){
  //  cout<<smallestElementIndex<<" "<<maxLength<<endl;
    if(m[arr[i]] == false){
      m[arr[i]] = true;
      int currLength = 1;
      int num = arr[i] + 1;
      while(m.count(num) > 0){
        m[num] = true;
        currLength++;
        num++;
      }
      num = arr[i] - 1;
      while(m.count(num) > 0){
        m[num] = true;
        currLength++;
        num--;
      }
     // cout<<arr[i]<<" "<<maxLength<<endl;
      if(currLength > maxLength ){
        maxLength = currLength;
          smallestElementIndex = mIndex[num+1];
      }
      else if(currLength == maxLength and mIndex[num+1] < smallestElementIndex)
        smallestElementIndex = mIndex[num+1];
      
    }
    
  }
  vector<int> v;
  for(int i=arr[smallestElementIndex]; i<arr[smallestElementIndex] + maxLength; i++)
    v.push_back(i);
  
return v;
}













int main() {
	int n;
	cin >> n;
	int *input = new int[n];
	for(int i = 0; i < n; i++){
		cin >> input[i];
	}
	vector<int> output = longestSubsequence(input, n);
	for(int i = 0; i < output.size(); i++) {
		cout << output[i] << endl;
	}
}
