#include <iostream>
#include <queue>
using namespace std;

template <typename T>
class BinaryTreeNode {
    public :
    T data;
    BinaryTreeNode<T> *left;
    BinaryTreeNode<T> *right;
    
    BinaryTreeNode(T data) {
        this -> data = data;
        left = NULL;
        right = NULL;
    }
};










BinaryTreeNode<int>* maxDataNode(BinaryTreeNode<int>* root) {
   if(root==nullptr)
     return nullptr;
  BinaryTreeNode<int> *max=root;
  BinaryTreeNode<int> *tempMax = maxDataNode(root->left);
    if(tempMax!=nullptr and tempMax->data > max->data)
      max=tempMax;
  tempMax = maxDataNode(root->right);
    if(tempMax!=nullptr and tempMax->data > max->data)
      max=tempMax;
  return max;

}








BinaryTreeNode<int>* takeInput() {
    int rootData;
    //cout << "Enter root data : ";
    cin >> rootData;
    if(rootData == -1) {
        return NULL;
    }
    BinaryTreeNode<int> *root = new BinaryTreeNode<int>(rootData);
    queue<BinaryTreeNode<int>*> q;
    q.push(root);
    while(!q.empty()) {
        BinaryTreeNode<int> *currentNode = q.front();
        q.pop();
        int leftChild, rightChild;
        //cout << "Enter left child of " << currentNode -> data << " : ";
        cin >> leftChild;
        if(leftChild != -1) {
            BinaryTreeNode<int>* leftNode = new BinaryTreeNode<int>(leftChild);
            currentNode -> left =leftNode;
            q.push(leftNode);
        }
        //cout << "Enter right child of " << currentNode -> data << " : ";
        cin >> rightChild;
        if(rightChild != -1) {
            BinaryTreeNode<int>* rightNode = new BinaryTreeNode<int>(rightChild);
            currentNode -> right =rightNode;
            q.push(rightNode);
        }
    }
    return root;
}

int main() {
    BinaryTreeNode<int>* root = takeInput();
    BinaryTreeNode<int>* ans = maxDataNode(root);
    if(ans != NULL) {
        cout << ans -> data << endl;
    }
}