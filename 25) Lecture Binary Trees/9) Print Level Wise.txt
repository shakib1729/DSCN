#include <iostream>
#include <queue>
using namespace std;

template <typename T>
class BinaryTreeNode {
    public : 
    T data;
    BinaryTreeNode<T> *left;
    BinaryTreeNode<T> *right;

    BinaryTreeNode(T data) {
        this -> data = data;
        left = NULL;
        right = NULL;
    }
};









#include<queue>

void printLevelWise(BinaryTreeNode<int> *root) {
   if(root == nullptr)
     return;
  queue <BinaryTreeNode<int> *> q;
  q.push(root);
  
  while(!q.empty()){
    BinaryTreeNode<int> *curr=q.front();
    q.pop();
    cout<<curr->data<<":";
    
    if(curr->left == nullptr)
      cout<<"L:-1,";
    else{
      cout<<"L:"<<curr->left->data<<",";
      q.push(curr->left);
    }
    
    if(curr->right == nullptr)
      cout<<"R:-1"<<endl;
     else{
      cout<<"R:"<<curr->right->data<<endl;
      q.push(curr->right);
    }   
    
  }
 
}














BinaryTreeNode<int>* takeInput() {
    int rootData;
    //cout << "Enter root data : ";
    cin >> rootData;
    if(rootData == -1) {
        return NULL;
    }
    BinaryTreeNode<int> *root = new BinaryTreeNode<int>(rootData);
    queue<BinaryTreeNode<int>*> q;
    q.push(root);
    while(!q.empty()) {
        BinaryTreeNode<int> *currentNode = q.front();
	q.pop();
        int leftChild, rightChild;
        //cout << "Enter left child of " << currentNode -> data << " : ";
        cin >> leftChild;
        if(leftChild != -1) {
            BinaryTreeNode<int>* leftNode = new BinaryTreeNode<int>(leftChild);
            currentNode -> left =leftNode;
            q.push(leftNode);
        }
        //cout << "Enter right child of " << currentNode -> data << " : ";
        cin >> rightChild;
        if(rightChild != -1) {
            BinaryTreeNode<int>* rightNode = new BinaryTreeNode<int>(rightChild);
            currentNode -> right =rightNode;
            q.push(rightNode);
        }
    }
    return root;
}

int main() {
    BinaryTreeNode<int>* root = takeInput();
    printLevelWise(root);
}
