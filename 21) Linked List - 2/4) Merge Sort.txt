//merge sort linked list recursive
#include <iostream>
using namespace std;

class node{
public:
    int data;
    node * next;
    node(int data){
        this->data=data;
        this->next=NULL;
    }
};



node* mergeSortedLL(node *head1, node *head2){
  if(head1 == nullptr)
    return head2;
  if(head2 == nullptr)
    return head1;
  
  node *head = nullptr, *tail = nullptr;
  
  while(head1 != nullptr and head2 != nullptr){
    
     if(head1 -> data < head2 -> data){
       if(head == nullptr)
         head = head1;
       else
         tail -> next = head1;
       tail = head1;
       head1 = head1->next;
     }
    
    else{
      if(head == nullptr)
         head = head2;
      else
         tail -> next = head2;
     tail = head2;
     head2 = head2->next;
    }
    
  }
  
  if(head1 != nullptr)
    tail -> next = head1;
  if(head2 != nullptr)
    tail -> next = head2;
  
  return head;
}

node* mergeSort(node *head) {
  if(head == nullptr or head -> next == nullptr)
     return head;
  
  node *fast = head -> next -> next, *slow = head;
  while(fast != nullptr){
    slow = slow -> next;
    fast = fast -> next;
    if(fast != nullptr)
      fast = fast -> next;
  }
  node * head2 = slow -> next;
  slow -> next = nullptr;
  
  head = mergeSort(head);
  head2 = mergeSort(head2);
  
  node *headAns = mergeSortedLL(head, head2);
 return headAns;
}







node* takeinput(){
    int data;
    cin>>data;
    node* head=NULL,*tail=NULL;
    while(data!=-1){
        node *newnode=new node(data);
        if(head==NULL)                  {
            head=newnode;
            tail=newnode;
        }
        else{
            tail->next=newnode;
            tail=newnode;
        }
        cin>>data;
    }
    return head;
}
void print(node *head)
{
    node*temp=head;
    while(temp!=NULL)
    {
        cout<<temp->data<<" ";
        temp=temp->next;
    }
    cout<<endl;
}
int main()
{
    node* head=takeinput();
    head= mergeSort(head);
    print(head);
    return 0;
}

