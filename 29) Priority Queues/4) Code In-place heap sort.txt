#include <iostream>
using namespace std;



#include<algorithm>

void inplaceHeapSort(int input[], int n){
   
 // created min heap by rearranging elements of the same array
  for(int i=1; i<n; i++){
    int index = i;
    
    while(index > 0){
      int parent = (index - 1)/2;
      if(input[parent] < input[index])
        break;
      swap<int> (input[parent], input[index]);
      index = parent;
    }
  }
 
  // swapping top element with the last element of the array and then heapify
  
  for(int i=n-1; i>=0; i--){
    swap<int> (input[0], input[i]);
    int index = 0;
    int left = 2*index + 1;
    int right = 2*index + 2;
    
    while(right < i){
      int swapIndex = input[left] < input[right] ? left: right;
      if(input[index] < input[swapIndex])
        break;
      swap<int> (input[index], input[swapIndex]);
      index = swapIndex;
      left = 2*index + 1;
      right = 2*index + 2;
    }
    if(left < i and input[left] < input[index])
      swap<int> (input[index], input[left]);
  }
  
}









int main() {
	
	int size;
	cin >> size;
	int *input = new int[1 + size];
	
	for(int i = 0; i < size; i++)
		cin >> input[i];
	
	inplaceHeapSort(input, size);

	for(int i = 0; i < size; i++)
		cout << input[i] << " ";
	
	return 0;
}
