#include <iostream>
template <typename T>

using namespace std;
class Node{
public:
    T data;
    Node<T> * next;
    Node(T data){
        this->data=data;
        this->next=NULL;
    }
};















#include<unordered_map>
void changeLL(Node<int>* head) {
   if(head == nullptr)
     return;
  unordered_map<int, int> m;
   int n = head->data;
  Node<int> *curr = head;
  
  while(curr != nullptr){
    if(curr->data > n)
      n = curr -> data;
    curr =curr -> next;
  }
  
  curr = head;
  while(curr != nullptr){
    if(m.count(curr->data) > 0)
      curr->data = ++n;
    m[curr->data]++;
    curr = curr->next;
  }

}










Node<int>* takeinput(){
    int data;
    cin>>data;
    Node<int>* head=NULL,*tail=NULL;
    while(data!=-1){
        Node<int> *newNode=new Node<int>(data);
        if(head==NULL)                  {
            head=newNode;
            tail=newNode;
        }
        else{
            tail->next=newNode;
            tail=newNode;
        }
        cin>>data;
    }
    return head;
}
void print(Node<int> *head)
{
    Node<int> *temp=head;
    while(temp!=NULL)
    {
        cout<<temp->data<<" ";
        temp=temp->next;
    }
    cout<<endl;
}

int main()
{
    Node<int>* head =takeinput();
    changeLL(head);
    print(head);
    return 0;
}

