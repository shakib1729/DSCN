#include <vector>
#include <climits>
#include <iostream>
using namespace std;


class Polynomial {
    int size;
    public:
     int *degCoeff;  
    
  		Polynomial(){
          degCoeff=new int[3]();
          size=3;
        }

  		Polynomial(Polynomial const &p){
  		//    cout<<"COPY CONSTRUCTOR"<<endl;
          this->size=p.size;
          this->degCoeff=new int[size]();
          for(int i=0;i<size;i++)
            this->degCoeff[i]=p.degCoeff[i];

        }

  		Polynomial& operator=(Polynomial const &p){
  		//    cout<<"ASSIGNMENT OPERATOR"<<endl;
           this->size=p.size;
          this->degCoeff=new int[size]();
          for(int i=0;i<size;i++)
            this->degCoeff[i]=p.degCoeff[i];
          return *this;
        }

  		void setCoefficient(int degree,int coeff){
          if(degree>=size){
            int *degCoeff2=new int[degree+1]();
            for(int i=0;i<size;i++)
              degCoeff2[i]=degCoeff[i];
            delete[] degCoeff;
            degCoeff=degCoeff2;
            size=degree+1;
          }
          degCoeff[degree]=coeff;
        }

  		Polynomial operator+(Polynomial const &p){
          Polynomial pNew;
      		 for(int i=0;i<size;i++)
               pNew.setCoefficient(i,degCoeff[i]);
             for(int i=0;i<p.size;i++)
               if(i>=pNew.size)
                 pNew.setCoefficient(i,p.degCoeff[i]);
              else
               pNew.degCoeff[i]+=p.degCoeff[i];
          
          return pNew;
        }

	   Polynomial operator-(Polynomial const &p){
        Polynomial pNew;
      		 for(int i=0;i<size;i++)
               pNew.setCoefficient(i,degCoeff[i]);
             for(int i=0;i<p.size;i++)
               if(i>=pNew.size)
                 pNew.setCoefficient(i,-p.degCoeff[i]);
              else
               pNew.degCoeff[i]-=p.degCoeff[i];
          
          return pNew;
        }

  	   Polynomial operator*(Polynomial const &p){
         Polynomial pNew;
         for(int i=0;i<size;i++)
           if(degCoeff[i]!=0)
           for(int j=0;j<p.size;j++){
             if(p.degCoeff[j]!=0){
               if(i+j>=pNew.size)
                 pNew.setCoefficient(i+j,degCoeff[i]*p.degCoeff[j]);
               else
                 pNew.degCoeff[i+j]+=degCoeff[i]*p.degCoeff[j];
             }   
           }
        return pNew;
       }

  		void print(){
          for(int i=0;i<size;i++)
            if(degCoeff[i]!=0)
              cout<<degCoeff[i]<<'x'<<i<<" ";
        }
};


//Driver program to test above functions
int main()
{
    int count1,count2,choice;
    cin >> count1;
    
    int *degree1 = new int[count1];
    int *coeff1 = new int[count1];
    
    for(int i=0;i < count1; i++) {
        cin >> degree1[i];
    }
    
    for(int i=0;i < count1; i++) {
        cin >> coeff1[i];
    }
    
    Polynomial first;
    for(int i = 0; i < count1; i++){
        first.setCoefficient(degree1[i],coeff1[i]);
    }
    
    cin >> count2;
    
    int *degree2 = new int[count2];
    int *coeff2 = new int[count2];
    
    for(int i=0;i < count2; i++) {
        cin >> degree2[i];
    }
    
    for(int i=0;i < count2; i++) {
        cin >> coeff2[i];
    }
    
    Polynomial second;
    for(int i = 0; i < count2; i++){
        second.setCoefficient(degree2[i],coeff2[i]);
    }
    
    cin >> choice;
    
    switch(choice){
            // Add
        case 1:
        {
            Polynomial result1 = first + second;
            result1.print();
            break;
        }
            // Subtract
        case 2 :
        {
            Polynomial result2 = first - second;
            result2.print();
            break;
        }
            // Multiply
        case 3 :
        {
            Polynomial result3 = first * second;
            result3.print();
            break;
        }
        case 4 : // Copy constructor
        {
            Polynomial third(first);
            if(third.degCoeff == first.degCoeff) {
                cout << "false" << endl;
            }
            else {
                cout << "true" << endl;
            }
            break;
        }
            
        case 5 : // Copy assignment operator
        {
            Polynomial fourth(first);
            if(fourth.degCoeff == first.degCoeff) {
                cout << "false" << endl;
            }
            else {
                cout << "true" << endl;
            }
            break;
        }
            
    }
    
    return 0;
}