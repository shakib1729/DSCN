#include <iostream>
using namespace std;
#include <vector>
#include <queue>
#include <climits>

template <typename T>
class TreeNode {
public:
    T data;
    vector<TreeNode<T>*> children;
    
    TreeNode(T data) {
        this->data = data;
    }
    
    ~TreeNode() {
        for (int i = 0; i < children.size(); i++) {
            delete children[i];
        }
    }
    
};








TreeNode <int>* findLargest(TreeNode<int> *root) {
    if(root==nullptr)
      return nullptr;
    TreeNode <int> *l=root;
    for(int i=0;i<root->children.size();i++){
      TreeNode <int> *temp=findLargest(root->children[i]);
      if(temp!=nullptr and temp->data > l->data)
        l=temp;
    }
  return l;
}

TreeNode <int>* secondLargest(TreeNode<int> *root, TreeNode<int> *largest) {
  if(root==nullptr)
      return nullptr;
   TreeNode <int> *slargest=nullptr;
  if(root->data < largest->data)
    slargest=root;
  for(int i=0;i<root->children.size();i++){
   TreeNode <int> *temp = secondLargest(root->children[i],largest);
    if(temp!=nullptr and temp->data!=largest->data)
       if(temp->data > slargest->data )
         slargest=temp;
  }
  return slargest;
}

TreeNode <int>* secondLargest(TreeNode<int> *root) {
  TreeNode <int> *largest=findLargest(root);
  TreeNode <int> *slargest=nullptr;
  if(largest!=nullptr)
    slargest=secondLargest(root,largest);
  return slargest;
}










TreeNode<int>* takeInputLevelWise() {
    int rootData;
    cin >> rootData;
    TreeNode<int>* root = new TreeNode<int>(rootData);
    
    queue<TreeNode<int>*> pendingNodes;
    
    pendingNodes.push(root);
    while (pendingNodes.size() != 0) {
        TreeNode<int>* front = pendingNodes.front();
        pendingNodes.pop();
        int numChild;
        cin >> numChild;
        for (int i = 0; i < numChild; i++) {
            int childData;
            cin >> childData;
            TreeNode<int>* child = new TreeNode<int>(childData);
            front->children.push_back(child);
            pendingNodes.push(child);
        }
    }
    return root;
}

int main() {
    TreeNode<int>* root = takeInputLevelWise();
    TreeNode<int>* ans = secondLargest(root);
    if(ans == NULL) {
        cout << INT_MIN << endl;
    }
    else {
        cout << ans -> data << endl;
    }
}
