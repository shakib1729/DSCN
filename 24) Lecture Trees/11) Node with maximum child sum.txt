#include <iostream>
using namespace std;
#include <vector>
#include <queue>

template <typename T>
class TreeNode {
public:
    T data;
    vector<TreeNode<T>*> children;
    
    TreeNode(T data) {
        this->data = data;
    }
    
    ~TreeNode() {
        for (int i = 0; i < children.size(); i++) {
            delete children[i];
        }
    }
    
};



TreeNode<int>* maxSumNode(TreeNode<int> *root){
  
   if(root == nullptr)
     return nullptr;
  
   TreeNode<int> *maxNode=root;
   int maxSum=0;
   queue<TreeNode<int>*> q;
   q.push(root);
  
   while(!q.empty()){
        TreeNode<int> *currNode=q.front();
        q.pop();
        int currSum=currNode->data;
     
        for(int i=0;i<currNode->children.size();i++){
          currSum+=currNode->children[i]->data;
          q.push(currNode->children[i]);
        }
     
        if(currSum>maxSum){
          maxSum=currSum;
          maxNode=currNode;
        }
   }
  return maxNode;
}









TreeNode<int>* takeInputLevelWise() {
    int rootData;
    cin >> rootData;
    TreeNode<int>* root = new TreeNode<int>(rootData);
    
    queue<TreeNode<int>*> pendingNodes;
    
    pendingNodes.push(root);
    while (pendingNodes.size() != 0) {
        TreeNode<int>* front = pendingNodes.front();
        pendingNodes.pop();
        int numChild;
        cin >> numChild;
        for (int i = 0; i < numChild; i++) {
            int childData;
            cin >> childData;
            TreeNode<int>* child = new TreeNode<int>(childData);
            front->children.push_back(child);
            pendingNodes.push(child);
        }
    }
    return root;
}

int main() {
    TreeNode<int>* root = takeInputLevelWise();
    TreeNode<int>* ans = maxSumNode(root);
    if(ans != NULL) {
        cout << ans -> data << endl;
    }
}


